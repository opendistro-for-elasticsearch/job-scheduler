/*
 *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */
import com.github.jengelman.gradle.plugins.shadow.ShadowBasePlugin

plugins {
    id 'com.github.johnrengelman.shadow'
    // id 'java-library'
    id 'jacoco'
    id 'maven'
    // id 'maven-publish'
    id 'signing'
    id "com.dorongold.task-tree" version "1.5"
}
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.rest-test'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE')
}

// checkstyleTest.ignoreFailures = true
forbiddenApisTest.ignoreFailures = true
dependencyLicenses.enabled = false
testingConventions.enabled = false
thirdPartyAudit.enabled = false
// TODO: enable
validateNebulaPom.enabled = false

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file("$buildDir/JacocoReport")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco/")
    }
}
check.dependsOn jacocoTestReport

dependencies {
    compileOnly "org.elasticsearch:elasticsearch:${es_version}"
    compile "com.cronutils:cron-utils:7.0.5"

    testImplementation "org.elasticsearch.test:framework:${es_version}"
    testImplementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"
}

shadowJar {
    relocate 'com.cronutils', 'com.amazon.opendistroforelasticsearch.jobscheduler.repackage.com.cronutils'
    relocate 'org.slf4j', 'com.amazon.opendistroforelasticsearch.jobscheduler.repackage.org.slf4j' // dependency of cron-utils
    classifier = null
}

test {
    doFirst {
        // reverse operation of https://github.com/elastic/elasticsearch/blob/7.6/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy#L736-L743
        // to fix the classpath for unit tests
        test.classpath -= project.files(project.tasks.named('shadowJar'))
        test.classpath -= project.configurations.getByName(ShadowBasePlugin.CONFIGURATION_NAME)
        test.classpath += project.extensions.getByType(SourceSetContainer).getByName(SourceSet.MAIN_SOURCE_SET_NAME).runtimeClasspath
    }
    // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
    systemProperty 'tests.security.manager', 'false'
}

integTestRunner {
    systemProperty 'tests.security.manager', 'false'
}

testClusters.integTest {
    testDistribution = 'OSS'
}

// generatePomFileForShadowPublication.enabled = false
// project.gradle.startParameter.excludedTaskNames.add('generatePomFileForNebulaPublication')
/*
* We already configure publication and we don't need or want this one that
* comes from the java-gradle-plugin.
*/
// afterEvaluate {
//     generatePomFileForPluginMavenPublication.enabled = false
// }

generatePom {
    println project.pluginManager.hasPlugin("elasticsearch.publish")
    project.pluginManager.withPlugin('com.github.johnrengelman.shadow') {
        MavenPublication publication = publishing.publications.maybeCreate('shadow', MavenPublication)

        // manually delete POM fields add by elasticsearch.publish plugin
        publication.pom.withXml { xml ->
            // reference: https://github.com/johnrengelman/shadow/blob/d4e649d7dd014bfdd9575bfec92d7e74c3cf1aca/src/main/groovy/com/github/jengelman/gradle/plugins/shadow/ShadowExtension.groovy#L25
            def dependenciesNode = xml.asNode().appendNode('dependencies')

            Node root = xml.asNode()
            println "print nodes"

            6.times {
                root.remove(root.children()[10])
            }

            root.children().eachWithIndex{ entry, int i ->
                println "child ${i}"
                println root.children()[i]
            }

            println "after remove"
        }
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            // project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar

            pom {
              name = "ElasticSearch Job Scheduler SPI"
              packaging = "jar"
              url = "https://github.com/opendistro-for-elasticsearch/job-scheduler"
              description = "Open Distro for Elasticsearch Job Scheduler"
              scm {
                connection = "scm:git@github.com:opendistro-for-elasticsearch/job-scheduler.git"
                developerConnection = "scm:git@github.com:opendistro-for-elasticsearch/job-scheduler.git"
                url = "git@github.com:opendistro-for-elasticsearch/job-scheduler.git"
              }
              licenses {
                license {
                  name = "The Apache License, Version 2.0"
                  url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
              }
              developers {
                developer {
                  id = "amazonwebservices"
                  name = "Amazon Web Services"
                  url = "https://aws.amazon.com"
                  organization = "Amazon Web Services"
                  organizationUrl = "https://aws.amazon.com"
                }
              }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype-staging"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
                password project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
            }
        }
    }

    // TODO - enabled debug logging for the time being, remove this eventually
    gradle.startParameter.setShowStacktrace(ShowStacktrace.ALWAYS)
    gradle.startParameter.setLogLevel(LogLevel.DEBUG)
}

signing {
    required { gradle.taskGraph.hasTask("publishShadowPublicationToSonatype-stagingRepository") }
    sign publishing.publications.shadow
}

// TODO: enable
validateNebulaPom.enabled = false